{{- $service := .}}
package dnd

// Code generated by internal/gen; DO NOT EDIT.
import (
    "encoding/json"
    "io/ioutil"
    "net/http"

    "github.com/brittonhayes/dnd/internal/utils"
    "github.com/brittonhayes/dnd/models"
    "github.com/google/go-querystring/query"
    "gopkg.in/mcuadros/go-defaults.v1"
)

var _ {{.Name}} = &{{.Name}}Service{}

// {{.Name}} interface covers the methods
// available for the {{.Name}}Service
type {{.Name}} interface {
{{range $k,$v := .Methods}}{{$k}}({{arg $v.Argument}}) (*models.{{typeName $v.Result}}, error)
{{end -}}
}

type {{.Name}}Service struct {
    // URL is the base URL of the service
    URL     string `default:"https://www.dnd5eapi.co/api"`
    {{if .Options }}Options *{{.Name}}Params{{end}}
}

{{if .Options -}}type {{.Name}}Params struct {
{{range $k,$v := .Options}}
    {{- $k}} string `url:"{{$v -}}"`
{{end -}}
}{{- end}}

// New{{.Name}}Service creates a new instance of the
// {{.Name}} service
func New{{.Name}}Service() *{{.Name}}Service {
    s := new({{.Name}}Service)
    defaults.SetDefaults(s)
    return s
}

// New{{.Name}}Service creates a custom instance of the
// {{.Name}} service
func NewCustom{{.Name}}Service(url string{{if .Options}}, params *{{.Name}}Params{{end}}) *{{.Name}}Service {
    return &{{.Name}}Service{URL: url{{if .Options}}, Options: params{{end}}}
}

{{range $k, $v := .Methods -}}
// {{$k}} {{$v.Comment}}
func (s *{{$service.Name}}Service) {{$k}}({{arg $v.Argument}}) (*models.{{typeName $v.Result}}, error) {
    var model = &models.{{typeName $v.Result}}{}
    {{ if ne $v.Argument ""}}
        if {{$v.Argument}} == "" {
            return nil, fmt.Errorf("{{$v.Argument}} not provided")
        }
    {{end}}

    {{if $service.Options}}
        q, _ := query.Values(s.Options)
        url := utils.URLWithQuery(s.URL, "{{$v.Endpoint}}", {{if ne $v.Argument ""}}{{$v.Argument}}{{else}}""{{end}}, q)
    {{- else}}
        url := utils.URL(s.URL, "{{$v.Endpoint}}", {{if ne $v.Argument ""}}{{$v.Argument}}{{else}}""{{end}}){{- end}}
    res, err := http.Get(url)
    if err != nil {
        return nil, err
    }
    defer res.Body.Close()

    body, _ := ioutil.ReadAll(res.Body)
    if err := model.JSON(body); err != nil {
        return nil, err
    }
    return model, nil
}
{{end}}

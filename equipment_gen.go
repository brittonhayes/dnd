package dnd

// Code generated by internal/gen; DO NOT EDIT.
import (
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/brittonhayes/dnd/internal/utils"
	"github.com/brittonhayes/dnd/models"
	"gopkg.in/mcuadros/go-defaults.v1"
)

var _ Equipment = &EquipmentService{}

// Equipment interface covers the methods
// available for the EquipmentService
type Equipment interface {
	FindAdventuringGear(index string) (*models.AdventuringGear, error)
	FindArmor(index string) (*models.Armor, error)
	FindEquipmentPack(index string) (*models.EquipmentPack, error)
	FindWeapon(index string) (*models.Weapon, error)
	List() (*models.Resource, error)
}

type EquipmentService struct {
	// URL is the base URL of the service
	URL string `default:"https://www.dnd5eapi.co/api"`
}

// NewEquipmentService creates a new instance of the
// Equipment service
func NewEquipmentService() *EquipmentService {
	s := new(EquipmentService)
	defaults.SetDefaults(s)
	return s
}

// NewEquipmentService creates a custom instance of the
// Equipment service
func NewCustomEquipmentService(url string) *EquipmentService {
	return &EquipmentService{URL: url}
}

// FindAdventuringGear finds a set of adventuring gear by name
func (s *EquipmentService) FindAdventuringGear(index string) (*models.AdventuringGear, error) {
	var model = &models.AdventuringGear{}

	if index == "" {
		return nil, fmt.Errorf("index not provided")
	}

	url := utils.URL(s.URL, "/equipment", index)
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

// FindArmor finds an armor's details by name
func (s *EquipmentService) FindArmor(index string) (*models.Armor, error) {
	var model = &models.Armor{}

	if index == "" {
		return nil, fmt.Errorf("index not provided")
	}

	url := utils.URL(s.URL, "/equipment", index)
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

// FindEquipmentPack finds an equipment pack by name
func (s *EquipmentService) FindEquipmentPack(index string) (*models.EquipmentPack, error) {
	var model = &models.EquipmentPack{}

	if index == "" {
		return nil, fmt.Errorf("index not provided")
	}

	url := utils.URL(s.URL, "/equipment", index)
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

// FindWeapon finds a weapon's details by name
func (s *EquipmentService) FindWeapon(index string) (*models.Weapon, error) {
	var model = &models.Weapon{}

	if index == "" {
		return nil, fmt.Errorf("index not provided")
	}

	url := utils.URL(s.URL, "/equipment", index)
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

// List lists the available equipment endpoints
func (s *EquipmentService) List() (*models.Resource, error) {
	var model = &models.Resource{}

	url := utils.URL(s.URL, "/equipment", "")
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

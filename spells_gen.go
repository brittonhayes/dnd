package dnd

// Code generated by internal/gen; DO NOT EDIT.
import (
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/brittonhayes/dnd/internal/utils"
	"github.com/brittonhayes/dnd/models"
	"github.com/google/go-querystring/query"
	"gopkg.in/mcuadros/go-defaults.v1"
)

var _ Spells = &SpellsService{}

// Spells interface covers the methods
// available for the SpellsService
type Spells interface {
	Find(index string) (*models.Spells, error)
	List() (*models.Resource, error)
}

type SpellsService struct {
	// URL is the base URL of the service
	URL     string `default:"https://www.dnd5eapi.co/api"`
	Options *SpellsParams
}

type SpellsParams struct {
	Level  string `url:"level"`
	Name   string `url:"name"`
	School string `url:"school"`
}

// NewSpellsService creates a new instance of the
// Spells service
func NewSpellsService() *SpellsService {
	s := new(SpellsService)
	defaults.SetDefaults(s)
	return s
}

// NewSpellsService creates a custom instance of the
// Spells service
func NewCustomSpellsService(url string, params *SpellsParams) *SpellsService {
	return &SpellsService{URL: url, Options: params}
}

// Find finds a spell by name
func (s *SpellsService) Find(index string) (*models.Spells, error) {
	var model = &models.Spells{}

	if index == "" {
		return nil, fmt.Errorf("index not provided")
	}

	q, _ := query.Values(s.Options)
	url := utils.URLWithQuery(s.URL, "/spells", index, q)
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

// List lists the available spells endpoints
func (s *SpellsService) List() (*models.Resource, error) {
	var model = &models.Resource{}

	q, _ := query.Values(s.Options)
	url := utils.URLWithQuery(s.URL, "/spells", "", q)
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

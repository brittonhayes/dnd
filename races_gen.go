package dnd

// Code generated by internal/gen; DO NOT EDIT.
import (
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/brittonhayes/dnd/internal/utils"
	"github.com/brittonhayes/dnd/models"
	"gopkg.in/mcuadros/go-defaults.v1"
)

var _ Races = &RacesService{}

// Races interface covers the methods
// available for the RacesService
type Races interface {
	FindRace(index string) (*models.Race, error)
	FindSubRace(index string) (*models.SubRace, error)
	ListRaces() (*models.Resource, error)
	ListSubRaces() (*models.Resource, error)
}

type RacesService struct {
	// URL is the base URL of the service
	URL string `default:"https://www.dnd5eapi.co/api"`
}

// NewRacesService creates a new instance of the
// Races service
func NewRacesService() *RacesService {
	s := new(RacesService)
	defaults.SetDefaults(s)
	return s
}

// NewRacesService creates a custom instance of the
// Races service
func NewCustomRacesService(url string) *RacesService {
	return &RacesService{URL: url}
}

// FindRace find a race by its index
func (s *RacesService) FindRace(index string) (*models.Race, error) {
	var model = &models.Race{}

	if index == "" {
		return nil, fmt.Errorf("index not provided")
	}

	url := utils.URL(s.URL, "/races", index)
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

// FindSubRace find a subrace by its index
func (s *RacesService) FindSubRace(index string) (*models.SubRace, error) {
	var model = &models.SubRace{}

	if index == "" {
		return nil, fmt.Errorf("index not provided")
	}

	url := utils.URL(s.URL, "/subraces", index)
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

// ListRaces lists out all races
func (s *RacesService) ListRaces() (*models.Resource, error) {
	var model = &models.Resource{}

	url := utils.URL(s.URL, "/races", "")
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}

// ListSubRaces lists out all subraces
func (s *RacesService) ListSubRaces() (*models.Resource, error) {
	var model = &models.Resource{}

	url := utils.URL(s.URL, "/subraces", "")
	res, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer res.Body.Close()

	body, _ := ioutil.ReadAll(res.Body)
	if err := model.JSON(body); err != nil {
		return nil, err
	}
	return model, nil
}
